#!/usr/bin/env python
import time
import os,sys
import argparse
import subprocess


#--from tools
from tools.randomstr import id_generator
from tools.tools import checkdir, load

#--get python version
version = int(sys.version[0])

#--user dependent paths
user    ='ccocuzza'
path    ='/work/JAM/'
fitpack ='%s/%s/fitpack'%(path,user)
wdir    =os.getcwd()
python  ='%s/apps/anaconda%s/bin/python'%(path,version)

#export PYTHONPATH=<fitpack>:/work/JAM/apps/LHAPDF/lib/python3.6/site-packages/

template="""#!/bin/csh
#SBATCH --job-name="<name>"
#SBATCH --output=<wdir>/<directory>/out/<name>.out
#SBATCH --error=<wdir>/<directory>/out/<name>.err

export FITPACK=<fitpack>
<python>  <fitpack>/fitlib/maxlike.py -n 1 -v <verbose> <input> -msrh "mv <<fname>> <wdir>/<directory>/msr/"   <prior>

"""

template=template.replace('<python>',python)
template=template.replace('<fitpack>',fitpack)
template=template.replace('<wdir>',wdir)



def gen_script(track,directory,prior=None,verbose=1,INPUT='input'):
    fname='jam-%s'%(id_generator(size=10))
    script=template[:]
    script=script.replace('<name>',fname)
    script=script.replace('<directory>',directory)
    script=script.replace('<verbose>',str(verbose))
    script=script.replace('<input>',str(INPUT))
    if  prior==None: 
        script=script.replace('<prior>','')
    else: 
        script=script.replace('<prior>','-p %s'%prior)

    F=open('current.local','w')
    F.writelines(script)
    F.close()

def pexit(msg):
    print(msg)
    sys.exit()

if __name__=='__main__':

    ap = argparse.ArgumentParser()
    msg =" 0: flat"
    msg+=" 1: with priors"
    msg+=" 2: with opt-priors"

    ap.add_argument('task'             ,type=int,help=msg)
    ap.add_argument('-d','--directory' ,type=str,default='unamed' 
                                       ,help='directory name to store results')
    ap.add_argument('-p','--priors'    ,type=str,default='unamed' ,help='priors')
    ap.add_argument('-n','--njobs'     ,type=int,default=10 ,help='number of jobs')
    ap.add_argument('-t','--test'      ,type=bool,default=False ,help='test flag')
    ap.add_argument('-i','--INPUT'      ,type=str,default='input' ,help='input file to use')
    args = ap.parse_args()

    if args.directory=='unamed': pexit('specify -d')

    version=2
    checkdir('%s/out'%args.directory)
    if version==2: checkdir('%s/msr'%args.directory)
    if version==3: checkdir('%s/msr-py3'%args.directory)
    
    if os.path.exists('%s/input.py'%args.directory): 
        print('Input file at %s already exists'%args.directory) 
        pass
    else:
        print('Copying input file to %s'%args.directory) 
        os.system('cp %s %s/input.py'%(args.INPUT,args.directory))

    if  args.task==0:

          cnt=0
          track='theory'
          while 1:
              cnt+=1 
              print(cnt)
              gen_script(track,args.directory,None,INPUT=args.INPUT)
              if args.test:
                  os.system('source current.local')
                  os.remove('current.local')
                  break
              else:
                  os.system('source current.local')
                  os.remove('current.local')
              if cnt==args.njobs: break
              time.sleep(1)

    elif  args.task==1 or args.task==2:
          track='theory'
          if args.task==1: 
              if version==2: path2priors='%s/%s/msr-inspected'%(wdir,args.priors)
              if version==3: path2priors='%s/%s/msr-inspected-py3'%(wdir,args.priors)
          if args.task==2: 
              path2priors='%s/%s/msr-opt-priors'%(wdir,args.priors)
              print('Using opt-priors...')
          msr=sorted(os.listdir(path2priors))

          path2running='%s/%s/out'%(wdir,args.directory)
          running = [_.replace('jam-','').replace('.out','.msr') \
                     for _ in os.listdir(path2running)\
                     if _.endswith('err')==False]

          if version==2: done = os.listdir('%s/%s/msr'%(wdir,args.directory))
          if version==3: done = os.listdir('%s/%s/msr-py3'%(wdir,args.directory))
          cnt=0
          for prior in msr:
              if cnt==args.njobs: break
              cnt+=1
              print('%d/%d'%(cnt,len(msr)))
              if prior in done: continue 
              start = time.time()
              gen_script(track,args.directory,'%s/%s'%(path2priors,prior),INPUT=args.INPUT)
              os.system('source current.local')
              os.remove('current.local')
              end = time.time()
              totaltime = end-start
              #print ('The time taken was %10.2f'%totaltime)
              if args.test: break
              time.sleep(1)

    #print ('The time taken was %10.2f'%totaltime)



